apiVersion: v1
kind: ServiceAccount
metadata:
  name: read-creds-sa
  namespace: ${instanceNS}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-creds-role
  namespace: ${instanceNS}
rules:
  - apiGroups: ["cpd.ibm.com"]
    resources: ["ibmcpds"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["platform-auth-idp-credentials"]
    verbs: ["get"]
  - apiGroups: ["route.openshift.io"]
    resources: ["routes"]
    resourceNames: ["cpd"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-creds-rb
  namespace: ${instanceNS}
subjects:
  - kind: ServiceAccount
    name: read-creds-sa
    namespace: ${instanceNS}
roleRef:
  kind: Role
  name: read-creds-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: post-cpd-print-creds
  namespace: ${instanceNS}
spec:
  template:
    spec:
      serviceAccountName: read-creds-sa
      restartPolicy: Never
      containers:
        - name: printer
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e
              NS=${instanceNS}
              CR=ibmcpd-cr
              SECRET=platform-auth-idp-credentials
              ROUTE=cpd

              echo "[INFO] Waiting for CPD (Ibmcpd/$CR) to be Completed & Successful..."
              for i in $(seq 1 240); do
                STATUS=$(kubectl get ibmcpd $CR -n $NS -o jsonpath='{.status.controlPlaneStatus}')
                SUCC=$(kubectl get ibmcpd $CR -n $NS -o jsonpath='{range .status.conditions[?(@.type=="Successful")]}{.status}{end}')
                if [ "$STATUS" = "Completed" ] && [ "$SUCC" = "True" ]; then
                  break
                fi
                sleep 60
              done

              if [ "$STATUS" != "Completed" ] || [ "$SUCC" != "True" ]; then
                echo "[ERROR] Timed out waiting for CPD completion"
                exit 1
              fi

              USERNAME=$(kubectl get secret $SECRET -n $NS -o go-template='{{index .data "admin_username" | base64decode}}')
              PASSWORD=$(kubectl get secret $SECRET -n $NS -o go-template='{{index .data "admin_password" | base64decode}}')
              HOST=$(kubectl get route $ROUTE -n $NS -o jsonpath='{.spec.host}')
              echo "=====================Software Hub Installation Done========================="
              echo "IBM Software Hub URL: https://$HOST"
              echo "Username: $USERNAME"
              echo "Password: $PASSWORD"
  backoffLimit: 0
